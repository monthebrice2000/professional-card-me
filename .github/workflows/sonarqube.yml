name: SonarQube analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarQube to decorate PRs with analysis results
  contents: read

# env:
#   DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
#   DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#   DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

jobs:
  # scan-env:
  #   name: gitleaks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      
  # TruffleHog:
  #   runs-on: ubuntu-latest
  #   needs: scan-env
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: TruffleHog OSS
  #       uses: trufflesecurity/trufflehog@main
  #       with:
  #         path: ./
  #         base: ${{ github.event.repository.default_branch }}
  #         head: HEAD
  #         # extra_args: --debug --only-verified
  # lint-docker:
  #   # needs: TruffleHog
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3 
  #     - uses: hadolint/hadolint-action@v3.1.0
  #       with:
  #         dockerfile: Dockerfile
  #         format: sarif
  #     - run: |
  #         echo $HADOLINT_RESULTS
  # depchecktest:
  #   needs: scan-env
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-latest
  #   name: depecheck_test
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     # - name: Build project with Maven
  #     #  run: mvn clean install
  #     - name: Depcheck
  #       uses: dependency-check/Dependency-Check_Action@main
  #       id: Depcheck
  #       with:
  #         project: 'professional-card-me'
  #         path: '.'
  #         format: 'HTML'
  #         # out: 'reports' # this is the default, no need to specify unless you wish to override it
  #         #args: >
  #         #  --failOnCVSS 7
  #         #  --enableRetired
  #     - name: Upload Test results
  #       uses: actions/upload-artifact@master
  #       with:
  #          name: Depcheck report
  #          path: ${{github.workspace}}/reports
  #     #     env-url: FOOBAR
  #     #- name: Use URL for something
  #     #  run: echo "${{ env.FOOBAR }}"
  # semgrep-ci:
  #   needs: depchecktest
  #   runs-on: ubuntu-latest
  #   container:
  #     # A Docker image with Semgrep installed. Do not change this.
  #     image: returntocorp/semgrep
  #   steps:
  #   - uses: actions/checkout@master
  #     with:
  #       fetch-depth: 0
  #   - run: semgrep ci
  #     env:
  #       SEMGREP_APP_TOKEN: ${{ env.SEMGREP_APP_TOKEN }}

  # sonarqube:
  #   needs: snyk
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@master
  #     with:
  #       fetch-depth: 0
  #   # Setup java 17 to be default (sonar-scanner requirement as of 5.x)
  #   - uses: actions/setup-java@v3
  #     with:
  #       distribution: 'temurin' # See 'Supported distributions' for available options
  #       java-version: '8'
  #   # Setup sonar-scanner
  #   - name: Setup SonarQube
  #     uses: warchant/setup-sonar-scanner@v3
  #   # Run sonar-scanner
  #   - name: SonarQube Scan
  #     run: sonar-scanner
  #          -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
  #          -Dsonar.login=${{ env.SONAR_TOKEN }}
  #          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
  #          -Dsonar.sources=$GITHUB_WORKSPACE
  #           # Comma-separated paths to directories containing test source files.
  #           #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
  #           # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
  #           #-Dsonar.verbose= # optional, default is false
  # snyk:
  #   needs: semgrep-ci
  #   permissions:
  #     contents: read # for actions/checkout to fetch code
  #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #     actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Snyk CLI to check for security issues
  #       # Snyk can be used to break the build when it detects security issues.
  #       # In this case we want to upload the SAST issues to GitHub Code Scanning
  #       uses: snyk/actions/node@806182742461562b67788a64410098c9d9b96adb

  #       # For Snyk Open Source you must first set up the development environment for your application's dependencies
  #       # For example for Node
  #       #- uses: actions/setup-node@v3
  #       #  with:
  #       #    node-version: 16
  #       continue-on-error: true
  #       env:
  #         # This is where you will need to introduce the Snyk API token created with your Snyk account
  #         SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
  #       with:
  #         args: --sarif-file-output=snyk.sarif

  #       # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
  #       # Use || true to not fail the pipeline
  #     # - name: Snyk Code test
  #       # run: snyk code test --sarif > snyk-code.sarif # || true

  #       # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
  #     # - name: Snyk Open Source monitor
  #     #  run: snyk monitor --all-projects

  #       # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
  #       # Use || true to not fail the pipeline.
  #     # - name: Snyk IaC test and report
  #     #   run: snyk iac test --report # || true

  #       # Build the docker image for testing
  #     # - name: Build a Docker image
  #     #   run: docker build -t your/image-to-test .
  #       # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
  #     # - name: Snyk Container monitor
  #     #   run: snyk container monitor your/image-to-test --file=Dockerfile

  #       # Push the Snyk Code results into GitHub Code Scanning tab
  #     - name: Upload result to GitHub Code Scanning
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: snyk.sarif
  
    docker-image-sign:
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
        id-token: write
      steps:
        - uses: actions/checkout@v3

        - name: Install Cosign
          uses: sigstore/cosign-installer@v3.1.1
        
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          
        - name: Login to Docker Container Registry
          uses: docker/login-action@v3
          with:
            registry: ${{ secrets.DOCKER_REGISTRY }}
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}
        
        - name: Build and push
          # env:
          #   DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          run: |
            # results=$(docker pull ${{ secrets.DOCKER_REGISTRY }}/profesional-card:latest || docker images -q ${{ secrets.DOCKER_REGISTRY }}/profesional-card:latest)
            # # echo $results
            # if [[ -n $results ]]; then
            #   echo "images exist"
            # else
            #   echo "Container doesn't exist"
            #   docker build -t ${{ secrets.DOCKER_REGISTRY }}/profesional-card:latest -f ./client/Dockerfile .
            #   docker build -t ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:latest -f ./nginx/Dockerfile .
            #   docker push ${{ secrets.DOCKER_REGISTRY }}/profesional-card:latest
            #   docker push ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:latest
            # fi
            SHA=$(git rev-parse --short HEAD)
            # docker build -t profesional-card:$SHA -f ./client/Dockerfile .
            docker build -t ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:$SHA -f ./nginx/Dockerfile .

            # docker save $(docker images ls --filter=reference="*$SHA*" -q) -o app.tar
            # docker images | sed '1d' | awk '{print $1 " " $2 " " $3}' > mydockersimages.list


            docker push ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:$SHA
            
        
        - name: Sign Container image
          env:
            COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
            COSIGN_PUB: ${{ secrets.COSIGN_PUB }}
          run: |
            SHA=$(git rev-parse --short HEAD)

            echo $COSIGN_KEY > cosignpbase64.key
            echo $COSIGN_PUB > cosignpbase64.pub

            cat cosignpbase64.key | base64 -d - > cosignp.key
            cat cosignpbase64.pub | base64 -d - > cosignp.pub

            # docker load -i ./app.tar
            # while read REPOSITORY TAG IMAGE_ID
            # do
            #   echo "== Tagging $REPOSITORY $TAG $IMAGE_ID =="
            #   docker tag "$IMAGE_ID" "$REPOSITORY:$TAG"
            # done < mydockersimages.list

            # docker images ls --filter=reference="*$SHA*"

            # cosign generate profesional-card:$SHA > payload_pc.json
            #cosign generate ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:$SHA > payload_np.json
            # openssl dgst -sha256 -sign openssl.key -out payload_pc.sig payload_pc.json
            #openssl dgst -sha256 -sign cosignp.key -out payload_np.sig payload_np.json

            # cat payload_pc.sig | base64 > payloadbase64_pc.sig
            # cat payload_np.sig | base64 > payloadbase64_np.sig

            # cosign sign --key cosign.key $IMAGE
            # cosign attach signature --payload payload_pc.json --signature payloadbase64_pc.sig profesional-card:$SHA
            #cosign attach signature --payload payload_np.json --signature payloadbase64_np.sig ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:$SHA

            ls -lt

            cosign sign --key cosignp.key ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:$SHA

            # cosign verify --key openssl.pub --insecure-ignore-tlog profesional-card:$SHA
            # cosign verify --key cosignp.pub --insecure-ignore-tlog ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:$SHA

            cosign verify --key cosignp.pub ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:$SHA
    
    # kubesec-scan:
    #   runs-on: ubuntu-latest
    #   steps:
    #     - uses: actions/checkout@v3
        
    #     - name: Set up QEMU
    #       uses: docker/setup-qemu-action@v3

    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3
        
    #     - name: Scan Kubernete files
    #       run: |
    #         search_dir="./k8s"
    #         for entry in $search_dir/*.yaml
    #         do
    #           echo Scan $entry kubernete file
    #           docker run -i kubesec/kubesec:latest scan --exit-code 0 /dev/stdin < $entry
    #         done
    
    # kubeaudit-scan:
    #   runs-on: ubuntu-latest
    #   needs: kubesec-scan
    #   steps:
    #     - uses: actions/checkout@v3
        
    #     - name: Set up QEMU
    #       uses: docker/setup-qemu-action@v3

    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3
        
    #     - name: Scan Kubernete files
    #       run: |
    #         search_dir="./k8s"
    #         for entry in $search_dir/*.yaml
    #         do
    #           echo Scan $entry kubernete file
    #           docker run -i shopify/kubeaudit all --exitcode 0 -f /dev/stdin < $entry
    #         done
    
    # kubescore-scan:
    #   runs-on: ubuntu-latest
    #   needs: kubeaudit-scan
    #   steps:
    #     - uses: actions/checkout@v3
        
    #     - name: Set up QEMU
    #       uses: docker/setup-qemu-action@v3

    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3
        
    #     - name: Scan Kubernete files
    #       run: |
    #         docker run -v $(pwd):/project zegl/kube-score:latest score --color always k8s/*.yaml || command
    
    # kubebench-scan:
    #   runs-on: ubuntu-latest
    #   needs: kubeaudit-scan
    #   steps:
    #     - uses: actions/checkout@v3
        
    #     - uses: tale/kubectl-action@v1
    #       with:
    #         base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    #     - run: |
    #         kubectl apply -f kube-bench-job.yaml
    #         # kubectl wait --for=condition=Ready job/kube-bench
    #         kubectl wait pods -n development -l app=kube-bench --for condition=Ready --timeout=90s
    #         kubectl get pods
    #         kubectl logs kube-bench-j76s9

    # tfsec-scan:
    #   name: tfsec sarif report
    #   runs-on: ubuntu-latest
    #   permissions:
    #     security-events: write
    #   steps:
    #     - name: Clone repo
    #       uses: actions/checkout@v3

    #     - name: tfsec
    #       uses: tfsec/tfsec-sarif-action@master
    #       with:
    #         sarif_file: tfsec.sarif         

    #     - name: Upload SARIF file
    #       uses: github/codeql-action/upload-sarif@v1
    #       with:
    #         # Path to SARIF file relative to the root of the repository
    #         sarif_file: tfsec.sarif 
    
    # nuclei-scan:
    #   runs-on: ubuntu-latest
    #   needs: docker
    #   permissions:
    #     issues: write
    #     contents: read # for actions/checkout to fetch code
    #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    #     actions: read
    #   steps:
    #     - uses: actions/checkout@v3

    #     - name: Nuclei - Vulnerability Scan
    #       uses: projectdiscovery/nuclei-action@main
    #       with:
    #         target: ${{ secrets.WEBAPP_URL }}
    #         # github-report: true
    #         # github-token: ${{ secrets.GITHUB_TOKEN }}

    #     - name: GitHub Workflow artifacts
    #       uses: actions/upload-artifact@v2
    #       with:
    #         name: nuclei.log
    #         path: nuclei.log

    #     - name: GitHub Security Dashboard Alerts update
    #       uses: github/codeql-action/upload-sarif@v2
    #       with:
    #         sarif_file: nuclei.sarif
  
    # zap_scan:
    #   runs-on: ubuntu-latest
    #   name: Scan the webapplication
    #   needs: docker
    #   permissions: 
    #     issues: write
    #   steps:
    #     - name: Checkout
    #       uses: actions/checkout@v3
    #       with:
    #         ref: master
    #     - name: ZAP Scan
    #       uses: zaproxy/action-full-scan@v0.8.0
    #       with:
    #         token: ${{ secrets.GITHUB_TOKEN }}
    #         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
    #         target: ${{ secrets.WEBAPP_URL }}
    #         # rules_file_name: '.zap/rules.tsv'
    #         cmd_options: '-a'

    # grype-scan:
    #   needs: docker
    #   runs-on: ubuntu-latest
    #   permissions:
    #     contents: read # for actions/checkout to fetch code
    #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    #     actions: read
    #   steps:
    #     - uses: actions/checkout@v3
        
    #     - name: Scan current project
    #       id: scan
    #       uses: anchore/scan-action@v2
    #       with:
    #         path: "./"
    #         fail-build: false
    #         acs-report-enable: true

    #     - name: upload Anchore scan SARIF report
    #       uses: github/codeql-action/upload-sarif@v2
    #       with:
    #         sarif_file: ${{ steps.scan.outputs.sarif }}
        
    #     - name: Set up QEMU
    #       uses: docker/setup-qemu-action@v3

    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3
          
    #     - name: Login to Docker Container Registry
    #       uses: docker/login-action@v3
    #       with:
    #         registry: ${{ secrets.DOCKER_REGISTRY }}
    #         username: ${{ secrets.DOCKER_USERNAME }}
    #         password: ${{ secrets.DOCKER_TOKEN }}
        
    #     - name: Pull images
    #       run: |
    #         docker pull ${{ secrets.DOCKER_REGISTRY }}/profesional-card:latest
    #         docker pull ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:latest
        
    #     # - name: Scan profesional-card image 
    #     #   uses: anchore/scan-action@v3
    #     #   id: imagescanpc
    #     #   with:
    #     #     image: ${{ secrets.DOCKER_REGISTRY }}/profesional-card
    #     #     registry-username: ${{ secrets.DOCKER_USERNAME }}
    #     #     registry-password: ${{ secrets.DOCKER_PASSWORD }}
    #     #     acs-report-enable: "true"
    #     #     fail-build: false
        
    #     # - name: upload Anchore Image scan SARIF report
    #     #   uses: github/codeql-action/upload-sarif@v2
    #     #   with:
    #     #     sarif_file: ${{ steps.imagescanpc.outputs.sarif }}
        
    #     # - name: Scan nginx-proxy image 
    #     #   uses: anchore/scan-action@v3
    #     #   id: imagescannp
    #     #   with:
    #     #     image: ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy
    #     #     registry-username: ${{ secrets.DOCKER_USERNAME }}
    #     #     registry-password: ${{ secrets.DOCKER_PASSWORD }}
    #     #     acs-report-enable: "true"
    #     #     fail-build: false
        
    #     # - name: upload Anchore nginx-proxy Image scan SARIF report
    #     #   uses: github/codeql-action/upload-sarif@v2
    #     #   with:
    #     #     sarif_file: ${{ steps.imagescannp.outputs.sarif }}
        
    #     - uses: anchore/scan-action/download-grype@v3
    #       id: grype 
        
    #     - name: Scan nginx-proxy image
    #       run: |
    #         grype ${{ secrets.DOCKER_REGISTRY }}/nginx-proxy:latest -o sarif > ./result.sarif
    #         cat result.sarif

    #     # - name: upload Anchore nginx-proxy Image scan SARIF report
    #     #   uses: github/codeql-action/upload-sarif@v2
    #     #   with:
    #     #     sarif_file: result2.sarif
        
    #     - name: Scan profesional card image
    #       run: |
    #         grype ${{ secrets.DOCKER_REGISTRY }}/profesional-card -o sarif > ./result.sarif
    #         cat result.sarif
        
    #     - name: upload Anchore profesional card Image scan SARIF report
    #       uses: github/codeql-action/upload-sarif@v2
    #       with:
    #         sarif_file: result.sarif

    # trivy-scan:
    #   needs: docker
    #   name: trivy-scan
    #   runs-on: ubuntu-20.04
    #   permissions:
    #     contents: read # for actions/checkout to fetch code
    #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    #     actions: read
    #   steps:
    #     - name: Checkout code
    #       uses: actions/checkout@v3

    #     - name: Run Trivy vulnerability scanner for registry
    #       uses: aquasecurity/trivy-action@master
    #       with:
    #         image-ref: ${{ secrets.DOCKER_REGISTRY }}/profesional-card
    #         format: 'sarif'
    #         output: 'trivy-results.sarif'
    #       env:
    #         TRIVY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #         TRIVY_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

    #     - name: Run Trivy vulnerability scanner in IaC mode
    #       uses: aquasecurity/trivy-action@master
    #       with:
    #         scan-type: 'config'
    #         hide-progress: false
    #         format: 'sarif'
    #         output: 'trivy-results-2.sarif'
    #         exit-code: '1'
    #         ignore-unfixed: true
    #         severity: 'CRITICAL,HIGH'

    #     - name: Run Trivy vulnerability scanner in repo mode
    #       uses: aquasecurity/trivy-action@master
    #       with:
    #         scan-type: 'fs'
    #         ignore-unfixed: true
    #         format: 'sarif'
    #         output: 'trivy-results-3.sarif'
    #         severity: 'CRITICAL'

    #     - name: Upload Trivy scan results to GitHub Security tab
    #       uses: github/codeql-action/upload-sarif@v2
    #       with:
    #         sarif_file: trivy-results-3.sarif
          


